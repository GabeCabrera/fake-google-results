{"version":3,"sources":["components/search/search.tsx","components/app/app.tsx","reportWebVitals.ts","index.tsx"],"names":["Search","useState","value","setValue","suggestions","setSuggestions","className","SearchOutlined","onChange","e","target","focusable","viewBox","xmlns","d","fill","Divider","orientation","CloseOutlined","onClick","map","item","href","TextField","variant","newValue","array","split","handleArrayChange","App","src","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kSAMaA,G,MAAS,WAAO,IAAD,EACAC,mBAAS,IADT,mBACnBC,EADmB,KACZC,EADY,OAEYF,mBAAS,IAFrB,mBAEnBG,EAFmB,KAENC,EAFM,KAkB1B,OACE,sBAAKC,UAAU,mBAAf,UACE,sBAAKA,UAAU,oBAAf,UACE,sBAAKA,UAAU,SAAf,UACE,cAACC,EAAA,EAAD,CAAgBD,UAAU,SAC1B,uBAAOA,UAAU,YAAYJ,MAAOA,EAAOM,SAAU,SAACC,GAAD,OAAYN,EAASM,EAAEC,OAAOR,UACnF,sBAAKI,UAAU,QAAQK,UAAU,QAAQC,QAAQ,YAAYC,MAAM,6BAAnE,UAAgG,sBAAMC,EAAE,yGAAyGC,KAAK,YAAiB,sBAAMD,EAAE,uBAAuBC,KAAK,YAAiB,sBAAMD,EAAE,2FAA2FC,KAAK,YAAiB,sBAAMD,EAAE,wIAAwIC,KAAK,eAC1iB,cAACC,EAAA,EAAD,CAASC,YAAY,WAAWX,UAAU,qBAC1C,cAACY,EAAA,EAAD,CAAeZ,UAAU,QAAQa,QAbrB,WAClBhB,EAAS,IACTE,EAAe,UAaX,cAACW,EAAA,EAAD,IACCZ,EAAYgB,KAAI,SAACC,GAAD,OACf,uBAAMf,UAAU,UAAhB,UACE,cAACC,EAAA,EAAD,CAAgBD,UAAU,iBAC1B,mBAAGA,UAAU,SAAb,SAAuBJ,IAAU,mBAAGI,UAAU,aAAb,oBAA+Be,WAGpE,sBAAKf,UAAU,cAAf,UACE,sBAAKA,UAAU,WAAf,UACE,wBAAQA,UAAU,gBAAlB,2BACA,wBAAQA,UAAU,gBAAlB,kCAEF,qBAAKA,UAAU,SAAf,SACE,mBAAGA,UAAU,eAAegB,KAAK,IAAjC,sDAKN,sBAAKhB,UAAU,SAAf,UACE,6CACA,cAACiB,EAAA,EAAD,CAAWjB,UAAU,YAAYkB,QAAQ,WAAWtB,MAAOA,EAAOM,SAAU,SAACC,GAAD,OA5CtDgB,EA4CqFhB,EAAEC,OAAOR,WA3CxHC,EAASsB,GADgB,IAACA,KA6CtB,+EACA,cAACF,EAAA,EAAD,CAAWjB,UAAU,YAAYkB,QAAQ,WAAWtB,MAAOE,EAAaI,SAAU,SAACC,GAAD,OA1C9D,SAACgB,GACzB,IAAMC,EAAQD,EAASE,MAAM,KAC7BtB,EAAeqB,GAwCmFE,CAAkBnB,EAAEC,OAAOR,kBCpDpH2B,G,MAAM,WACjB,OACE,sBAAKvB,UAAU,YAAf,UACE,qBAAKwB,IAAI,kCAAkCxB,UAAU,UACrD,cAAC,EAAD,SCMSyB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.d76b0c6e.chunk.js","sourcesContent":["\nimport React, { useState } from 'react';\nimport { SearchOutlined, CloseOutlined } from '@ant-design/icons';\nimport { Divider, TextField } from '@material-ui/core';\nimport './search.css';\n\nexport const Search = () => {\n  const [value, setValue] = useState('');\n  const [suggestions, setSuggestions] = useState([]);\n\n  const handlePhraseChange = (newValue: any) => {\n    setValue(newValue);\n  }\n\n  const handleArrayChange = (newValue: any) => {\n    const array = newValue.split(',')\n    setSuggestions(array);\n  }\n\n  const handleReset = () => {\n    setValue('')\n    setSuggestions([]);\n  }\n\n  return (\n    <div className='search-container'>\n      <div className='results-container'>\n        <div className=\"search\">\n          <SearchOutlined className='icon' />\n          <input className='searchbar' value={value} onChange={(e: any) => setValue(e.target.value)} />\n          <svg className='voice' focusable=\"false\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"m12 15c1.66 0 3-1.31 3-2.97v-7.02c0-1.66-1.34-3.01-3-3.01s-3 1.34-3 3.01v7.02c0 1.66 1.34 2.97 3 2.97z\" fill=\"#4285f4\"></path><path d=\"m11 18.08h2v3.92h-2z\" fill=\"#34a853\"></path><path d=\"m7.05 16.87c-1.27-1.33-2.05-2.83-2.05-4.87h2c0 1.45 0.56 2.42 1.47 3.38v0.32l-1.15 1.18z\" fill=\"#f4b400\"></path><path d=\"m12 16.93a4.97 5.25 0 0 1 -3.54 -1.55l-1.41 1.49c1.26 1.34 3.02 2.13 4.95 2.13 3.87 0 6.99-2.92 6.99-7h-1.99c0 2.92-2.24 4.93-5 4.93z\" fill=\"#ea4335\"></path></svg>\n          <Divider orientation='vertical' className='vertical-divider' />\n          <CloseOutlined className='close' onClick={handleReset} />\n        </div>\n        <Divider />\n        {suggestions.map((item) => (\n          <span className='results'>\n            <SearchOutlined className='results-icon' />\n            <p className='phrase'>{value}</p><p className='suggestion'>{` ${item}`}</p>\n          </span>\n        ))}\n        <div className='flex-column'>\n          <div className='flex-row'>\n            <button className='google-button'>Google Search</button>\n            <button className='google-button'>I'm Feeling Lucky</button>\n          </div>\n          <div className='report'>\n            <a className='report-label' href='#'>Report inappropriate predictions</a>\n          </div>\n        </div>\n      </div>\n\n      <div className='inputs'>\n        <h4>Search Term</h4>\n        <TextField className='textfield' variant='outlined' value={value} onChange={(e: any) => handlePhraseChange(e.target.value)} />\n        <h4>Fake Results (Separated by commas, no spaces)</h4>\n        <TextField className='textfield' variant='outlined' value={suggestions} onChange={(e: any) => handleArrayChange(e.target.value)} />\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\nimport { Search } from '../search'\nimport './app.css';\n\nexport const App = () => {\n  return (\n    <div className='container'>\n      <img src='https://i.imgur.com/xPiNm81.png' className='image' /> \n      <Search />\n    </div>\n  );\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './components/app';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}